{"ast":null,"code":"/**\r\n * validateField: Validates a single field against a regex and returns an error message if invalid.\r\n * @param {string} value The value of the field.\r\n * @param {RegExp} regex The regular expression to test the value against.\r\n * @param {string} errorMessage The error message to return if validation fails.\r\n * @returns {string | null} Error message if invalid, null otherwise.\r\n */\nexport const validateField = (value, regex, errorMessage) => {\n  return !regex.test(value) ? errorMessage : null;\n};\n\n/**\r\n * validateForm: Validates all fields for user and store forms.\r\n * @param {object} formData The form data object.\r\n * @param {string} formType 'user' or 'store'.\r\n * @returns {object} An object containing error messages for invalid fields.\r\n */\nexport const validateForm = (formData, formType) => {\n  const errors = {};\n  const nameRegex = /^.{20,60}$/;\n  const emailRegex = /^\\S+@\\S+\\.\\S+$/;\n  const passwordRegex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.{8,16}$).*$/; // At least one uppercase, one special, 8-16 chars\n  const addressRegex = /^.{0,400}$/;\n\n  // Common validations for both user and store forms\n  errors.name = validateField(formData.name, nameRegex, 'Name must be between 20 and 60 characters.');\n  errors.email = validateField(formData.email, emailRegex, 'Invalid email format.');\n  errors.address = validateField(formData.address, addressRegex, 'Address cannot exceed 400 characters.');\n  if (formType === 'user') {\n    errors.password = validateField(formData.password, passwordRegex, 'Password must be 8-16 characters, include at least one uppercase letter and one special character.');\n  } else if (formType === 'store') {\n    if (!formData.owner_id) {\n      errors.owner_id = 'Please select an owner.';\n    }\n  }\n\n  // Filter out null errors\n  Object.keys(errors).forEach(key => errors[key] === null && delete errors[key]);\n  return errors;\n};","map":{"version":3,"names":["validateField","value","regex","errorMessage","test","validateForm","formData","formType","errors","nameRegex","emailRegex","passwordRegex","addressRegex","name","email","address","password","owner_id","Object","keys","forEach","key"],"sources":["C:/Users/omash/Downloads/Omashree/store_rating_system/frontend/src/utils/validation.js"],"sourcesContent":["/**\r\n * validateField: Validates a single field against a regex and returns an error message if invalid.\r\n * @param {string} value The value of the field.\r\n * @param {RegExp} regex The regular expression to test the value against.\r\n * @param {string} errorMessage The error message to return if validation fails.\r\n * @returns {string | null} Error message if invalid, null otherwise.\r\n */\r\nexport const validateField = (value, regex, errorMessage) => {\r\n  return !regex.test(value) ? errorMessage : null;\r\n};\r\n\r\n/**\r\n * validateForm: Validates all fields for user and store forms.\r\n * @param {object} formData The form data object.\r\n * @param {string} formType 'user' or 'store'.\r\n * @returns {object} An object containing error messages for invalid fields.\r\n */\r\nexport const validateForm = (formData, formType) => {\r\n  const errors = {};\r\n\r\n  const nameRegex = /^.{20,60}$/;\r\n  const emailRegex = /^\\S+@\\S+\\.\\S+$/;\r\n  const passwordRegex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.{8,16}$).*$/; // At least one uppercase, one special, 8-16 chars\r\n  const addressRegex = /^.{0,400}$/;\r\n\r\n  // Common validations for both user and store forms\r\n  errors.name = validateField(formData.name, nameRegex, 'Name must be between 20 and 60 characters.');\r\n  errors.email = validateField(formData.email, emailRegex, 'Invalid email format.');\r\n  errors.address = validateField(formData.address, addressRegex, 'Address cannot exceed 400 characters.');\r\n\r\n  if (formType === 'user') {\r\n    errors.password = validateField(formData.password, passwordRegex, 'Password must be 8-16 characters, include at least one uppercase letter and one special character.');\r\n  } else if (formType === 'store') {\r\n    if (!formData.owner_id) {\r\n      errors.owner_id = 'Please select an owner.';\r\n    }\r\n  }\r\n\r\n  // Filter out null errors\r\n  Object.keys(errors).forEach(key => errors[key] === null && delete errors[key]);\r\n\r\n  return errors;\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,aAAa,GAAGA,CAACC,KAAK,EAAEC,KAAK,EAAEC,YAAY,KAAK;EAC3D,OAAO,CAACD,KAAK,CAACE,IAAI,CAACH,KAAK,CAAC,GAAGE,YAAY,GAAG,IAAI;AACjD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,YAAY,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;EAClD,MAAMC,MAAM,GAAG,CAAC,CAAC;EAEjB,MAAMC,SAAS,GAAG,YAAY;EAC9B,MAAMC,UAAU,GAAG,gBAAgB;EACnC,MAAMC,aAAa,GAAG,6CAA6C,CAAC,CAAC;EACrE,MAAMC,YAAY,GAAG,YAAY;;EAEjC;EACAJ,MAAM,CAACK,IAAI,GAAGb,aAAa,CAACM,QAAQ,CAACO,IAAI,EAAEJ,SAAS,EAAE,4CAA4C,CAAC;EACnGD,MAAM,CAACM,KAAK,GAAGd,aAAa,CAACM,QAAQ,CAACQ,KAAK,EAAEJ,UAAU,EAAE,uBAAuB,CAAC;EACjFF,MAAM,CAACO,OAAO,GAAGf,aAAa,CAACM,QAAQ,CAACS,OAAO,EAAEH,YAAY,EAAE,uCAAuC,CAAC;EAEvG,IAAIL,QAAQ,KAAK,MAAM,EAAE;IACvBC,MAAM,CAACQ,QAAQ,GAAGhB,aAAa,CAACM,QAAQ,CAACU,QAAQ,EAAEL,aAAa,EAAE,oGAAoG,CAAC;EACzK,CAAC,MAAM,IAAIJ,QAAQ,KAAK,OAAO,EAAE;IAC/B,IAAI,CAACD,QAAQ,CAACW,QAAQ,EAAE;MACtBT,MAAM,CAACS,QAAQ,GAAG,yBAAyB;IAC7C;EACF;;EAEA;EACAC,MAAM,CAACC,IAAI,CAACX,MAAM,CAAC,CAACY,OAAO,CAACC,GAAG,IAAIb,MAAM,CAACa,GAAG,CAAC,KAAK,IAAI,IAAI,OAAOb,MAAM,CAACa,GAAG,CAAC,CAAC;EAE9E,OAAOb,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}