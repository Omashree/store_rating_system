{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\omash\\\\Downloads\\\\Omashree\\\\store_rating_system\\\\frontend\\\\src\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { useState, createContext, useEffect } from 'react';\n\n// Create the authentication context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(null);\n\n/**\r\n * AuthProvider Component:\r\n * Provides authentication state (token and user role) to its children.\r\n * It manages login and logout functions and persists state in localStorage.\r\n */\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  // State to store the JWT token and user role, initialized from localStorage\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [role, setRole] = useState(localStorage.getItem('role'));\n\n  // Function to log in a user, storing token and role in state and localStorage\n  const login = (newToken, newRole) => {\n    setToken(newToken);\n    setRole(newRole);\n    localStorage.setItem('token', newToken);\n    localStorage.setItem('role', newRole);\n  };\n\n  // Function to log out a user, clearing token and role from state and localStorage\n  const logout = () => {\n    setToken(null);\n    setRole(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('role');\n  };\n\n  // Effect to ensure state is in sync with localStorage on initial load\n  useEffect(() => {\n    const storedToken = localStorage.getItem('token');\n    const storedRole = localStorage.getItem('role');\n    if (storedToken && storedRole) {\n      setToken(storedToken);\n      setRole(storedRole);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      token,\n      role,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"lh6hSg0hignX19agpMxIGh3C770=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","useState","createContext","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","token","setToken","localStorage","getItem","role","setRole","login","newToken","newRole","setItem","logout","removeItem","storedToken","storedRole","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/omash/Downloads/Omashree/store_rating_system/frontend/src/AuthContext.js"],"sourcesContent":["import React, { useState, createContext, useEffect } from 'react';\r\n\r\n// Create the authentication context\r\nexport const AuthContext = createContext(null);\r\n\r\n/**\r\n * AuthProvider Component:\r\n * Provides authentication state (token and user role) to its children.\r\n * It manages login and logout functions and persists state in localStorage.\r\n */\r\nexport const AuthProvider = ({ children }) => {\r\n  // State to store the JWT token and user role, initialized from localStorage\r\n  const [token, setToken] = useState(localStorage.getItem('token'));\r\n  const [role, setRole] = useState(localStorage.getItem('role'));\r\n\r\n  // Function to log in a user, storing token and role in state and localStorage\r\n  const login = (newToken, newRole) => {\r\n    setToken(newToken);\r\n    setRole(newRole);\r\n    localStorage.setItem('token', newToken);\r\n    localStorage.setItem('role', newRole);\r\n  };\r\n\r\n  // Function to log out a user, clearing token and role from state and localStorage\r\n  const logout = () => {\r\n    setToken(null);\r\n    setRole(null);\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('role');\r\n  };\r\n\r\n  // Effect to ensure state is in sync with localStorage on initial load\r\n  useEffect(() => {\r\n    const storedToken = localStorage.getItem('token');\r\n    const storedRole = localStorage.getItem('role');\r\n    if (storedToken && storedRole) {\r\n      setToken(storedToken);\r\n      setRole(storedRole);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ token, role, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,aAAa,EAAEC,SAAS,QAAQ,OAAO;;AAEjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGJ,aAAa,CAAC,IAAI,CAAC;;AAE9C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAACW,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EACjE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAACW,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;;EAE9D;EACA,MAAMG,KAAK,GAAGA,CAACC,QAAQ,EAAEC,OAAO,KAAK;IACnCP,QAAQ,CAACM,QAAQ,CAAC;IAClBF,OAAO,CAACG,OAAO,CAAC;IAChBN,YAAY,CAACO,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAAC;IACvCL,YAAY,CAACO,OAAO,CAAC,MAAM,EAAED,OAAO,CAAC;EACvC,CAAC;;EAED;EACA,MAAME,MAAM,GAAGA,CAAA,KAAM;IACnBT,QAAQ,CAAC,IAAI,CAAC;IACdI,OAAO,CAAC,IAAI,CAAC;IACbH,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChCT,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;;EAED;EACAlB,SAAS,CAAC,MAAM;IACd,MAAMmB,WAAW,GAAGV,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACjD,MAAMU,UAAU,GAAGX,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIS,WAAW,IAAIC,UAAU,EAAE;MAC7BZ,QAAQ,CAACW,WAAW,CAAC;MACrBP,OAAO,CAACQ,UAAU,CAAC;IACrB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACElB,OAAA,CAACC,WAAW,CAACkB,QAAQ;IAACC,KAAK,EAAE;MAAEf,KAAK;MAAEI,IAAI;MAAEE,KAAK;MAAEI;IAAO,CAAE;IAAAZ,QAAA,EACzDA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACpB,EAAA,CApCWF,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}